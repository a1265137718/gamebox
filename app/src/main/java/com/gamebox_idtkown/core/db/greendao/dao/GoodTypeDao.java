package com.gamebox_idtkown.core.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gamebox_idtkown.core.db.greendao.GoodType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOOD_TYPE".
*/
public class GoodTypeDao extends AbstractDao<GoodType, Long> {

    public static final String TABLENAME = "GOOD_TYPE";

    /**
     * Properties of entity GoodType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TypeId = new Property(1, String.class, "typeId", false, "TYPE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Ico = new Property(4, String.class, "ico", false, "ICO");
        public final static Property Total_num = new Property(5, String.class, "total_num", false, "TOTAL_NUM");
        public final static Property Total_convert = new Property(6, String.class, "total_convert", false, "TOTAL_CONVERT");
    }


    public GoodTypeDao(DaoConfig config) {
        super(config);
    }
    
    public GoodTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOOD_TYPE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE_ID\" TEXT," + // 1: typeId
                "\"NAME\" TEXT," + // 2: name
                "\"TITLE\" TEXT," + // 3: title
                "\"ICO\" TEXT," + // 4: ico
                "\"TOTAL_NUM\" TEXT," + // 5: total_num
                "\"TOTAL_CONVERT\" TEXT);"); // 6: total_convert
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOOD_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(2, typeId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String ico = entity.getIco();
        if (ico != null) {
            stmt.bindString(5, ico);
        }
 
        String total_num = entity.getTotal_num();
        if (total_num != null) {
            stmt.bindString(6, total_num);
        }
 
        String total_convert = entity.getTotal_convert();
        if (total_convert != null) {
            stmt.bindString(7, total_convert);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(2, typeId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String ico = entity.getIco();
        if (ico != null) {
            stmt.bindString(5, ico);
        }
 
        String total_num = entity.getTotal_num();
        if (total_num != null) {
            stmt.bindString(6, total_num);
        }
 
        String total_convert = entity.getTotal_convert();
        if (total_convert != null) {
            stmt.bindString(7, total_convert);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodType readEntity(Cursor cursor, int offset) {
        GoodType entity = new GoodType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ico
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // total_num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // total_convert
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIco(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotal_num(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotal_convert(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodType entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
