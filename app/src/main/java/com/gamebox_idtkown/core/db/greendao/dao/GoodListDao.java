package com.gamebox_idtkown.core.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gamebox_idtkown.core.db.greendao.GoodList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOOD_LIST".
*/
public class GoodListDao extends AbstractDao<GoodList, Long> {

    public static final String TABLENAME = "GOOD_LIST";

    /**
     * Properties of entity GoodList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Curr_stock = new Property(1, String.class, "curr_stock", false, "CURR_STOCK");
        public final static Property Desp = new Property(2, String.class, "desp", false, "DESP");
        public final static Property Game_id = new Property(3, String.class, "game_id", false, "GAME_ID");
        public final static Property Game_name = new Property(4, String.class, "game_name", false, "GAME_NAME");
        public final static Property GoodId = new Property(5, String.class, "goodId", false, "GOOD_ID");
        public final static Property Img = new Property(6, String.class, "img", false, "IMG");
        public final static Property Is_comm = new Property(7, String.class, "is_comm", false, "IS_COMM");
        public final static Property Max_buy_num = new Property(8, String.class, "max_buy_num", false, "MAX_BUY_NUM");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Price = new Property(10, String.class, "price", false, "PRICE");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
        public final static Property Stock = new Property(12, String.class, "stock", false, "STOCK");
        public final static Property Type_id = new Property(13, String.class, "type_id", false, "TYPE_ID");
        public final static Property Type_name = new Property(14, String.class, "type_name", false, "TYPE_NAME");
        public final static Property Type_val = new Property(15, String.class, "type_val", false, "TYPE_VAL");
    }


    public GoodListDao(DaoConfig config) {
        super(config);
    }
    
    public GoodListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOOD_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CURR_STOCK\" TEXT," + // 1: curr_stock
                "\"DESP\" TEXT," + // 2: desp
                "\"GAME_ID\" TEXT," + // 3: game_id
                "\"GAME_NAME\" TEXT," + // 4: game_name
                "\"GOOD_ID\" TEXT," + // 5: goodId
                "\"IMG\" TEXT," + // 6: img
                "\"IS_COMM\" TEXT," + // 7: is_comm
                "\"MAX_BUY_NUM\" TEXT," + // 8: max_buy_num
                "\"NAME\" TEXT," + // 9: name
                "\"PRICE\" TEXT," + // 10: price
                "\"STATUS\" TEXT," + // 11: status
                "\"STOCK\" TEXT," + // 12: stock
                "\"TYPE_ID\" TEXT," + // 13: type_id
                "\"TYPE_NAME\" TEXT," + // 14: type_name
                "\"TYPE_VAL\" TEXT);"); // 15: type_val
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOOD_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String curr_stock = entity.getCurr_stock();
        if (curr_stock != null) {
            stmt.bindString(2, curr_stock);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(3, desp);
        }
 
        String game_id = entity.getGame_id();
        if (game_id != null) {
            stmt.bindString(4, game_id);
        }
 
        String game_name = entity.getGame_name();
        if (game_name != null) {
            stmt.bindString(5, game_name);
        }
 
        String goodId = entity.getGoodId();
        if (goodId != null) {
            stmt.bindString(6, goodId);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(7, img);
        }
 
        String is_comm = entity.getIs_comm();
        if (is_comm != null) {
            stmt.bindString(8, is_comm);
        }
 
        String max_buy_num = entity.getMax_buy_num();
        if (max_buy_num != null) {
            stmt.bindString(9, max_buy_num);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(11, price);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
 
        String stock = entity.getStock();
        if (stock != null) {
            stmt.bindString(13, stock);
        }
 
        String type_id = entity.getType_id();
        if (type_id != null) {
            stmt.bindString(14, type_id);
        }
 
        String type_name = entity.getType_name();
        if (type_name != null) {
            stmt.bindString(15, type_name);
        }
 
        String type_val = entity.getType_val();
        if (type_val != null) {
            stmt.bindString(16, type_val);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String curr_stock = entity.getCurr_stock();
        if (curr_stock != null) {
            stmt.bindString(2, curr_stock);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(3, desp);
        }
 
        String game_id = entity.getGame_id();
        if (game_id != null) {
            stmt.bindString(4, game_id);
        }
 
        String game_name = entity.getGame_name();
        if (game_name != null) {
            stmt.bindString(5, game_name);
        }
 
        String goodId = entity.getGoodId();
        if (goodId != null) {
            stmt.bindString(6, goodId);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(7, img);
        }
 
        String is_comm = entity.getIs_comm();
        if (is_comm != null) {
            stmt.bindString(8, is_comm);
        }
 
        String max_buy_num = entity.getMax_buy_num();
        if (max_buy_num != null) {
            stmt.bindString(9, max_buy_num);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(11, price);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
 
        String stock = entity.getStock();
        if (stock != null) {
            stmt.bindString(13, stock);
        }
 
        String type_id = entity.getType_id();
        if (type_id != null) {
            stmt.bindString(14, type_id);
        }
 
        String type_name = entity.getType_name();
        if (type_name != null) {
            stmt.bindString(15, type_name);
        }
 
        String type_val = entity.getType_val();
        if (type_val != null) {
            stmt.bindString(16, type_val);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodList readEntity(Cursor cursor, int offset) {
        GoodList entity = new GoodList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // curr_stock
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // desp
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // game_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // game_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // goodId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // img
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // is_comm
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // max_buy_num
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // price
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // status
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // stock
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // type_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // type_name
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // type_val
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurr_stock(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDesp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGame_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGame_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoodId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIs_comm(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMax_buy_num(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPrice(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStock(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setType_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setType_name(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setType_val(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodList entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
