package com.gamebox_idtkown.core.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gamebox_idtkown.core.db.greendao.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Nick_name = new Property(3, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property Pwd = new Property(6, String.class, "pwd", false, "PWD");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Qq = new Property(8, String.class, "qq", false, "QQ");
        public final static Property Sex = new Property(9, String.class, "sex", false, "SEX");
        public final static Property Birth = new Property(10, String.class, "birth", false, "BIRTH");
        public final static Property Area_id = new Property(11, String.class, "area_id", false, "AREA_ID");
        public final static Property Point = new Property(12, String.class, "point", false, "POINT");
        public final static Property Money = new Property(13, String.class, "money", false, "MONEY");
        public final static Property Is_vali_mobile = new Property(14, Boolean.class, "is_vali_mobile", false, "IS_VALI_MOBILE");
        public final static Property CheckTime = new Property(15, String.class, "checkTime", false, "CHECK_TIME");
        public final static Property Signed = new Property(16, Boolean.class, "signed", false, "SIGNED");
        public final static Property Num = new Property(17, Integer.class, "num", false, "NUM");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"NAME\" TEXT," + // 2: name
                "\"NICK_NAME\" TEXT," + // 3: nick_name
                "\"MOBILE\" TEXT," + // 4: mobile
                "\"AVATAR\" TEXT," + // 5: avatar
                "\"PWD\" TEXT," + // 6: pwd
                "\"EMAIL\" TEXT," + // 7: email
                "\"QQ\" TEXT," + // 8: qq
                "\"SEX\" TEXT," + // 9: sex
                "\"BIRTH\" TEXT," + // 10: birth
                "\"AREA_ID\" TEXT," + // 11: area_id
                "\"POINT\" TEXT," + // 12: point
                "\"MONEY\" TEXT," + // 13: money
                "\"IS_VALI_MOBILE\" INTEGER," + // 14: is_vali_mobile
                "\"CHECK_TIME\" TEXT," + // 15: checkTime
                "\"SIGNED\" INTEGER," + // 16: signed
                "\"NUM\" INTEGER);"); // 17: num
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(4, nick_name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(7, pwd);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(9, qq);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(11, birth);
        }
 
        String area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindString(12, area_id);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(13, point);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(14, money);
        }
 
        Boolean is_vali_mobile = entity.getIs_vali_mobile();
        if (is_vali_mobile != null) {
            stmt.bindLong(15, is_vali_mobile ? 1L: 0L);
        }
 
        String checkTime = entity.getCheckTime();
        if (checkTime != null) {
            stmt.bindString(16, checkTime);
        }
 
        Boolean signed = entity.getSigned();
        if (signed != null) {
            stmt.bindLong(17, signed ? 1L: 0L);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(18, num);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(4, nick_name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(7, pwd);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(9, qq);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(11, birth);
        }
 
        String area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindString(12, area_id);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(13, point);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(14, money);
        }
 
        Boolean is_vali_mobile = entity.getIs_vali_mobile();
        if (is_vali_mobile != null) {
            stmt.bindLong(15, is_vali_mobile ? 1L: 0L);
        }
 
        String checkTime = entity.getCheckTime();
        if (checkTime != null) {
            stmt.bindString(16, checkTime);
        }
 
        Boolean signed = entity.getSigned();
        if (signed != null) {
            stmt.bindLong(17, signed ? 1L: 0L);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(18, num);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nick_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pwd
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // qq
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // birth
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // area_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // point
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // money
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // is_vali_mobile
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // checkTime
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // signed
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17) // num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNick_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPwd(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQq(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBirth(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setArea_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPoint(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMoney(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIs_vali_mobile(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setCheckTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSigned(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setNum(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
