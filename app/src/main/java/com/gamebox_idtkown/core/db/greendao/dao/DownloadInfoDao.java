package com.gamebox_idtkown.core.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gamebox_idtkown.core.db.greendao.DownloadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_INFO".
*/
public class DownloadInfoDao extends AbstractDao<DownloadInfo, Long> {

    public static final String TABLENAME = "DOWNLOAD_INFO";

    /**
     * Properties of entity DownloadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property PackageName = new Property(3, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property IconUrl = new Property(4, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property Speed = new Property(6, String.class, "speed", false, "SPEED");
        public final static Property Size = new Property(7, String.class, "size", false, "SIZE");
        public final static Property Precent = new Property(8, Float.class, "precent", false, "PRECENT");
        public final static Property Status = new Property(9, Integer.class, "status", false, "STATUS");
        public final static Property IsUpdate = new Property(10, Boolean.class, "isUpdate", false, "IS_UPDATE");
        public final static Property GameId = new Property(11, String.class, "gameId", false, "GAME_ID");
        public final static Property Type = new Property(12, String.class, "type", false, "TYPE");
    }


    public DownloadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"URL\" TEXT," + // 2: url
                "\"PACKAGE_NAME\" TEXT," + // 3: packageName
                "\"ICON_URL\" TEXT," + // 4: iconUrl
                "\"DESC\" TEXT," + // 5: desc
                "\"SPEED\" TEXT," + // 6: speed
                "\"SIZE\" TEXT," + // 7: size
                "\"PRECENT\" REAL," + // 8: precent
                "\"STATUS\" INTEGER," + // 9: status
                "\"IS_UPDATE\" INTEGER," + // 10: isUpdate
                "\"GAME_ID\" TEXT," + // 11: gameId
                "\"TYPE\" TEXT);"); // 12: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(4, packageName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(5, iconUrl);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindString(7, speed);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(8, size);
        }
 
        Float precent = entity.getPrecent();
        if (precent != null) {
            stmt.bindDouble(9, precent);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(10, status);
        }
 
        Boolean isUpdate = entity.getIsUpdate();
        if (isUpdate != null) {
            stmt.bindLong(11, isUpdate ? 1L: 0L);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(12, gameId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(13, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(4, packageName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(5, iconUrl);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindString(7, speed);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(8, size);
        }
 
        Float precent = entity.getPrecent();
        if (precent != null) {
            stmt.bindDouble(9, precent);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(10, status);
        }
 
        Boolean isUpdate = entity.getIsUpdate();
        if (isUpdate != null) {
            stmt.bindLong(11, isUpdate ? 1L: 0L);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(12, gameId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(13, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadInfo readEntity(Cursor cursor, int offset) {
        DownloadInfo entity = new DownloadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // packageName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // iconUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // speed
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // size
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // precent
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isUpdate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // gameId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPackageName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIconUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSpeed(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSize(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrecent(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIsUpdate(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setGameId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
