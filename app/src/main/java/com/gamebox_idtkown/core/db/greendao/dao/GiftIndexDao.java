package com.gamebox_idtkown.core.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gamebox_idtkown.core.db.greendao.GiftIndex;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GIFT_INDEX".
*/
public class GiftIndexDao extends AbstractDao<GiftIndex, Long> {

    public static final String TABLENAME = "GIFT_INDEX";

    /**
     * Properties of entity GiftIndex.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GameId = new Property(1, String.class, "gameId", false, "GAME_ID");
        public final static Property GameName = new Property(2, String.class, "gameName", false, "GAME_NAME");
        public final static Property LastGiftName = new Property(3, String.class, "lastGiftName", false, "LAST_GIFT_NAME");
        public final static Property IconUrl = new Property(4, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Num = new Property(5, String.class, "num", false, "NUM");
    }


    public GiftIndexDao(DaoConfig config) {
        super(config);
    }
    
    public GiftIndexDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GIFT_INDEX\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GAME_ID\" TEXT," + // 1: gameId
                "\"GAME_NAME\" TEXT," + // 2: gameName
                "\"LAST_GIFT_NAME\" TEXT," + // 3: lastGiftName
                "\"ICON_URL\" TEXT," + // 4: iconUrl
                "\"NUM\" TEXT);"); // 5: num
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GIFT_INDEX\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GiftIndex entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(2, gameId);
        }
 
        String gameName = entity.getGameName();
        if (gameName != null) {
            stmt.bindString(3, gameName);
        }
 
        String lastGiftName = entity.getLastGiftName();
        if (lastGiftName != null) {
            stmt.bindString(4, lastGiftName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(5, iconUrl);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(6, num);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GiftIndex entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(2, gameId);
        }
 
        String gameName = entity.getGameName();
        if (gameName != null) {
            stmt.bindString(3, gameName);
        }
 
        String lastGiftName = entity.getLastGiftName();
        if (lastGiftName != null) {
            stmt.bindString(4, lastGiftName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(5, iconUrl);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(6, num);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GiftIndex readEntity(Cursor cursor, int offset) {
        GiftIndex entity = new GiftIndex( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gameId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gameName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastGiftName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // iconUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GiftIndex entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGameId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGameName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastGiftName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIconUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GiftIndex entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GiftIndex entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GiftIndex entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
