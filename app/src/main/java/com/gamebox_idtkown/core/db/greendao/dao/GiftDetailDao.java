package com.gamebox_idtkown.core.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gamebox_idtkown.core.db.greendao.GiftDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GIFT_DETAIL".
*/
public class GiftDetailDao extends AbstractDao<GiftDetail, Long> {

    public static final String TABLENAME = "GIFT_DETAIL";

    /**
     * Properties of entity GiftDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GameId = new Property(1, String.class, "gameId", false, "GAME_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property ImgUrl = new Property(5, String.class, "imgUrl", false, "IMG_URL");
        public final static Property TotalNum = new Property(6, String.class, "totalNum", false, "TOTAL_NUM");
        public final static Property SurplusNum = new Property(7, String.class, "surplusNum", false, "SURPLUS_NUM");
        public final static Property Point = new Property(8, String.class, "point", false, "POINT");
        public final static Property IsPay = new Property(9, Boolean.class, "isPay", false, "IS_PAY");
        public final static Property Access_date = new Property(10, String.class, "access_date", false, "ACCESS_DATE");
        public final static Property GiftId = new Property(11, String.class, "giftId", false, "GIFT_ID");
        public final static Property Code = new Property(12, String.class, "code", false, "CODE");
        public final static Property Goods_id = new Property(13, String.class, "goods_id", false, "GOODS_ID");
        public final static Property Goods_type_id = new Property(14, String.class, "goods_type_id", false, "GOODS_TYPE_ID");
        public final static Property Change_note = new Property(15, String.class, "change_note", false, "CHANGE_NOTE");
        public final static Property Desp = new Property(16, String.class, "desp", false, "DESP");
    }


    public GiftDetailDao(DaoConfig config) {
        super(config);
    }
    
    public GiftDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GIFT_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GAME_ID\" TEXT," + // 1: gameId
                "\"TYPE\" TEXT," + // 2: type
                "\"NAME\" TEXT," + // 3: name
                "\"CONTENT\" TEXT," + // 4: content
                "\"IMG_URL\" TEXT," + // 5: imgUrl
                "\"TOTAL_NUM\" TEXT," + // 6: totalNum
                "\"SURPLUS_NUM\" TEXT," + // 7: surplusNum
                "\"POINT\" TEXT," + // 8: point
                "\"IS_PAY\" INTEGER," + // 9: isPay
                "\"ACCESS_DATE\" TEXT," + // 10: access_date
                "\"GIFT_ID\" TEXT," + // 11: giftId
                "\"CODE\" TEXT," + // 12: code
                "\"GOODS_ID\" TEXT," + // 13: goods_id
                "\"GOODS_TYPE_ID\" TEXT," + // 14: goods_type_id
                "\"CHANGE_NOTE\" TEXT," + // 15: change_note
                "\"DESP\" TEXT);"); // 16: desp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GIFT_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GiftDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(2, gameId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(6, imgUrl);
        }
 
        String totalNum = entity.getTotalNum();
        if (totalNum != null) {
            stmt.bindString(7, totalNum);
        }
 
        String surplusNum = entity.getSurplusNum();
        if (surplusNum != null) {
            stmt.bindString(8, surplusNum);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(9, point);
        }
 
        Boolean isPay = entity.getIsPay();
        if (isPay != null) {
            stmt.bindLong(10, isPay ? 1L: 0L);
        }
 
        String access_date = entity.getAccess_date();
        if (access_date != null) {
            stmt.bindString(11, access_date);
        }
 
        String giftId = entity.getGiftId();
        if (giftId != null) {
            stmt.bindString(12, giftId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(13, code);
        }
 
        String goods_id = entity.getGoods_id();
        if (goods_id != null) {
            stmt.bindString(14, goods_id);
        }
 
        String goods_type_id = entity.getGoods_type_id();
        if (goods_type_id != null) {
            stmt.bindString(15, goods_type_id);
        }
 
        String change_note = entity.getChange_note();
        if (change_note != null) {
            stmt.bindString(16, change_note);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(17, desp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GiftDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(2, gameId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(6, imgUrl);
        }
 
        String totalNum = entity.getTotalNum();
        if (totalNum != null) {
            stmt.bindString(7, totalNum);
        }
 
        String surplusNum = entity.getSurplusNum();
        if (surplusNum != null) {
            stmt.bindString(8, surplusNum);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(9, point);
        }
 
        Boolean isPay = entity.getIsPay();
        if (isPay != null) {
            stmt.bindLong(10, isPay ? 1L: 0L);
        }
 
        String access_date = entity.getAccess_date();
        if (access_date != null) {
            stmt.bindString(11, access_date);
        }
 
        String giftId = entity.getGiftId();
        if (giftId != null) {
            stmt.bindString(12, giftId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(13, code);
        }
 
        String goods_id = entity.getGoods_id();
        if (goods_id != null) {
            stmt.bindString(14, goods_id);
        }
 
        String goods_type_id = entity.getGoods_type_id();
        if (goods_type_id != null) {
            stmt.bindString(15, goods_type_id);
        }
 
        String change_note = entity.getChange_note();
        if (change_note != null) {
            stmt.bindString(16, change_note);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(17, desp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GiftDetail readEntity(Cursor cursor, int offset) {
        GiftDetail entity = new GiftDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gameId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imgUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // totalNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // surplusNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // point
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isPay
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // access_date
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // giftId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // code
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // goods_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // goods_type_id
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // change_note
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // desp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GiftDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGameId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImgUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotalNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSurplusNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPoint(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsPay(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setAccess_date(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGiftId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGoods_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGoods_type_id(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setChange_note(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDesp(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GiftDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GiftDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GiftDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
