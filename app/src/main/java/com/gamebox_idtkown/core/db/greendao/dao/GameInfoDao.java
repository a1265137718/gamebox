package com.gamebox_idtkown.core.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gamebox_idtkown.core.db.greendao.GameInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_INFO".
*/
public class GameInfoDao extends AbstractDao<GameInfo, Long> {

    public static final String TABLENAME = "GAME_INFO";

    /**
     * Properties of entity GameInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GameId = new Property(1, String.class, "gameId", false, "GAME_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property PackageName = new Property(4, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property Down_url = new Property(6, String.class, "down_url", false, "DOWN_URL");
        public final static Property IconUrl = new Property(7, String.class, "iconUrl", false, "ICON_URL");
        public final static Property CateName = new Property(8, String.class, "cateName", false, "CATE_NAME");
        public final static Property Desc = new Property(9, String.class, "desc", false, "DESC");
        public final static Property Version = new Property(10, String.class, "version", false, "VERSION");
        public final static Property TotalSize = new Property(11, Integer.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property DownloadTimes = new Property(12, String.class, "downloadTimes", false, "DOWNLOAD_TIMES");
        public final static Property UpdateTime = new Property(13, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property CacheType = new Property(14, String.class, "cacheType", false, "CACHE_TYPE");
        public final static Property Money = new Property(15, String.class, "money", false, "MONEY");
        public final static Property HasGift = new Property(16, Integer.class, "hasGift", false, "HAS_GIFT");
        public final static Property Size_text = new Property(17, String.class, "size_text", false, "SIZE_TEXT");
    }


    public GameInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GameInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GAME_ID\" TEXT," + // 1: gameId
                "\"NAME\" TEXT," + // 2: name
                "\"TYPE\" TEXT," + // 3: type
                "\"PACKAGE_NAME\" TEXT," + // 4: packageName
                "\"URL\" TEXT," + // 5: url
                "\"DOWN_URL\" TEXT," + // 6: down_url
                "\"ICON_URL\" TEXT," + // 7: iconUrl
                "\"CATE_NAME\" TEXT," + // 8: cateName
                "\"DESC\" TEXT," + // 9: desc
                "\"VERSION\" TEXT," + // 10: version
                "\"TOTAL_SIZE\" INTEGER," + // 11: totalSize
                "\"DOWNLOAD_TIMES\" TEXT," + // 12: downloadTimes
                "\"UPDATE_TIME\" TEXT," + // 13: updateTime
                "\"CACHE_TYPE\" TEXT," + // 14: cacheType
                "\"MONEY\" TEXT," + // 15: money
                "\"HAS_GIFT\" INTEGER," + // 16: hasGift
                "\"SIZE_TEXT\" TEXT);"); // 17: size_text
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GameInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(2, gameId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(5, packageName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String down_url = entity.getDown_url();
        if (down_url != null) {
            stmt.bindString(7, down_url);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(8, iconUrl);
        }
 
        String cateName = entity.getCateName();
        if (cateName != null) {
            stmt.bindString(9, cateName);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(10, desc);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(11, version);
        }
 
        Integer totalSize = entity.getTotalSize();
        if (totalSize != null) {
            stmt.bindLong(12, totalSize);
        }
 
        String downloadTimes = entity.getDownloadTimes();
        if (downloadTimes != null) {
            stmt.bindString(13, downloadTimes);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(14, updateTime);
        }
 
        String cacheType = entity.getCacheType();
        if (cacheType != null) {
            stmt.bindString(15, cacheType);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(16, money);
        }
 
        Integer hasGift = entity.getHasGift();
        if (hasGift != null) {
            stmt.bindLong(17, hasGift);
        }
 
        String size_text = entity.getSize_text();
        if (size_text != null) {
            stmt.bindString(18, size_text);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GameInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(2, gameId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(5, packageName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String down_url = entity.getDown_url();
        if (down_url != null) {
            stmt.bindString(7, down_url);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(8, iconUrl);
        }
 
        String cateName = entity.getCateName();
        if (cateName != null) {
            stmt.bindString(9, cateName);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(10, desc);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(11, version);
        }
 
        Integer totalSize = entity.getTotalSize();
        if (totalSize != null) {
            stmt.bindLong(12, totalSize);
        }
 
        String downloadTimes = entity.getDownloadTimes();
        if (downloadTimes != null) {
            stmt.bindString(13, downloadTimes);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(14, updateTime);
        }
 
        String cacheType = entity.getCacheType();
        if (cacheType != null) {
            stmt.bindString(15, cacheType);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(16, money);
        }
 
        Integer hasGift = entity.getHasGift();
        if (hasGift != null) {
            stmt.bindLong(17, hasGift);
        }
 
        String size_text = entity.getSize_text();
        if (size_text != null) {
            stmt.bindString(18, size_text);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GameInfo readEntity(Cursor cursor, int offset) {
        GameInfo entity = new GameInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gameId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // packageName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // down_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // iconUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cateName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // desc
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // version
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // totalSize
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // downloadTimes
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // updateTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // cacheType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // money
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // hasGift
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // size_text
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GameInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGameId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPackageName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDown_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIconUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCateName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDesc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVersion(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTotalSize(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setDownloadTimes(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUpdateTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCacheType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMoney(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHasGift(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setSize_text(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GameInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GameInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GameInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
