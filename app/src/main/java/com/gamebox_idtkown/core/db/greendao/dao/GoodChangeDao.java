package com.gamebox_idtkown.core.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gamebox_idtkown.core.db.greendao.GoodChange;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOOD_CHANGE".
*/
public class GoodChangeDao extends AbstractDao<GoodChange, Long> {

    public static final String TABLENAME = "GOOD_CHANGE";

    /**
     * Properties of entity GoodChange.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Goods_name = new Property(1, String.class, "goods_name", false, "GOODS_NAME");
        public final static Property Goods_img = new Property(2, String.class, "goods_img", false, "GOODS_IMG");
        public final static Property GoodId = new Property(3, String.class, "goodId", false, "GOOD_ID");
        public final static Property Goods_price = new Property(4, String.class, "goods_price", false, "GOODS_PRICE");
        public final static Property User_id = new Property(5, String.class, "user_id", false, "USER_ID");
        public final static Property Trade_time_text = new Property(6, String.class, "trade_time_text", false, "TRADE_TIME_TEXT");
    }


    public GoodChangeDao(DaoConfig config) {
        super(config);
    }
    
    public GoodChangeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOOD_CHANGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GOODS_NAME\" TEXT," + // 1: goods_name
                "\"GOODS_IMG\" TEXT," + // 2: goods_img
                "\"GOOD_ID\" TEXT," + // 3: goodId
                "\"GOODS_PRICE\" TEXT," + // 4: goods_price
                "\"USER_ID\" TEXT," + // 5: user_id
                "\"TRADE_TIME_TEXT\" TEXT);"); // 6: trade_time_text
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOOD_CHANGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodChange entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String goods_name = entity.getGoods_name();
        if (goods_name != null) {
            stmt.bindString(2, goods_name);
        }
 
        String goods_img = entity.getGoods_img();
        if (goods_img != null) {
            stmt.bindString(3, goods_img);
        }
 
        String goodId = entity.getGoodId();
        if (goodId != null) {
            stmt.bindString(4, goodId);
        }
 
        String goods_price = entity.getGoods_price();
        if (goods_price != null) {
            stmt.bindString(5, goods_price);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(6, user_id);
        }
 
        String trade_time_text = entity.getTrade_time_text();
        if (trade_time_text != null) {
            stmt.bindString(7, trade_time_text);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodChange entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String goods_name = entity.getGoods_name();
        if (goods_name != null) {
            stmt.bindString(2, goods_name);
        }
 
        String goods_img = entity.getGoods_img();
        if (goods_img != null) {
            stmt.bindString(3, goods_img);
        }
 
        String goodId = entity.getGoodId();
        if (goodId != null) {
            stmt.bindString(4, goodId);
        }
 
        String goods_price = entity.getGoods_price();
        if (goods_price != null) {
            stmt.bindString(5, goods_price);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(6, user_id);
        }
 
        String trade_time_text = entity.getTrade_time_text();
        if (trade_time_text != null) {
            stmt.bindString(7, trade_time_text);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodChange readEntity(Cursor cursor, int offset) {
        GoodChange entity = new GoodChange( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goods_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goods_img
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goodId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // goods_price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // trade_time_text
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodChange entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoods_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoods_img(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoodId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoods_price(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTrade_time_text(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodChange entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodChange entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodChange entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
