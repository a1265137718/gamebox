package com.gamebox_idtkown.core.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gamebox_idtkown.core.db.greendao.EarnPointTaskInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EARN_POINT_TASK_INFO".
*/
public class EarnPointTaskInfoDao extends AbstractDao<EarnPointTaskInfo, Long> {

    public static final String TABLENAME = "EARN_POINT_TASK_INFO";

    /**
     * Properties of entity EarnPointTaskInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Log_action_name = new Property(1, String.class, "log_action_name", false, "LOG_ACTION_NAME");
        public final static Property Log_point = new Property(2, String.class, "log_point", false, "LOG_POINT");
        public final static Property Point_action_id = new Property(3, String.class, "point_action_id", false, "POINT_ACTION_ID");
        public final static Property Point = new Property(4, String.class, "point", false, "POINT");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Bind_mobile = new Property(6, String.class, "bind_mobile", false, "BIND_MOBILE");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property Title_sub = new Property(8, String.class, "title_sub", false, "TITLE_SUB");
        public final static Property Desp = new Property(9, String.class, "desp", false, "DESP");
        public final static Property Ico = new Property(10, String.class, "ico", false, "ICO");
        public final static Property Type = new Property(11, String.class, "type", false, "TYPE");
        public final static Property App_active = new Property(12, String.class, "app_active", false, "APP_ACTIVE");
        public final static Property Share_content = new Property(13, String.class, "share_content", false, "SHARE_CONTENT");
    }


    public EarnPointTaskInfoDao(DaoConfig config) {
        super(config);
    }
    
    public EarnPointTaskInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EARN_POINT_TASK_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LOG_ACTION_NAME\" TEXT," + // 1: log_action_name
                "\"LOG_POINT\" TEXT," + // 2: log_point
                "\"POINT_ACTION_ID\" TEXT," + // 3: point_action_id
                "\"POINT\" TEXT," + // 4: point
                "\"NAME\" TEXT," + // 5: name
                "\"BIND_MOBILE\" TEXT," + // 6: bind_mobile
                "\"TITLE\" TEXT," + // 7: title
                "\"TITLE_SUB\" TEXT," + // 8: title_sub
                "\"DESP\" TEXT," + // 9: desp
                "\"ICO\" TEXT," + // 10: ico
                "\"TYPE\" TEXT," + // 11: type
                "\"APP_ACTIVE\" TEXT," + // 12: app_active
                "\"SHARE_CONTENT\" TEXT);"); // 13: share_content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EARN_POINT_TASK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EarnPointTaskInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String log_action_name = entity.getLog_action_name();
        if (log_action_name != null) {
            stmt.bindString(2, log_action_name);
        }
 
        String log_point = entity.getLog_point();
        if (log_point != null) {
            stmt.bindString(3, log_point);
        }
 
        String point_action_id = entity.getPoint_action_id();
        if (point_action_id != null) {
            stmt.bindString(4, point_action_id);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(5, point);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String bind_mobile = entity.getBind_mobile();
        if (bind_mobile != null) {
            stmt.bindString(7, bind_mobile);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String title_sub = entity.getTitle_sub();
        if (title_sub != null) {
            stmt.bindString(9, title_sub);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(10, desp);
        }
 
        String ico = entity.getIco();
        if (ico != null) {
            stmt.bindString(11, ico);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String app_active = entity.getApp_active();
        if (app_active != null) {
            stmt.bindString(13, app_active);
        }
 
        String share_content = entity.getShare_content();
        if (share_content != null) {
            stmt.bindString(14, share_content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EarnPointTaskInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String log_action_name = entity.getLog_action_name();
        if (log_action_name != null) {
            stmt.bindString(2, log_action_name);
        }
 
        String log_point = entity.getLog_point();
        if (log_point != null) {
            stmt.bindString(3, log_point);
        }
 
        String point_action_id = entity.getPoint_action_id();
        if (point_action_id != null) {
            stmt.bindString(4, point_action_id);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(5, point);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String bind_mobile = entity.getBind_mobile();
        if (bind_mobile != null) {
            stmt.bindString(7, bind_mobile);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String title_sub = entity.getTitle_sub();
        if (title_sub != null) {
            stmt.bindString(9, title_sub);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(10, desp);
        }
 
        String ico = entity.getIco();
        if (ico != null) {
            stmt.bindString(11, ico);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String app_active = entity.getApp_active();
        if (app_active != null) {
            stmt.bindString(13, app_active);
        }
 
        String share_content = entity.getShare_content();
        if (share_content != null) {
            stmt.bindString(14, share_content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EarnPointTaskInfo readEntity(Cursor cursor, int offset) {
        EarnPointTaskInfo entity = new EarnPointTaskInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // log_action_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // log_point
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // point_action_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // point
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bind_mobile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // title_sub
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // desp
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ico
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // app_active
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // share_content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EarnPointTaskInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLog_action_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLog_point(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPoint_action_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPoint(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBind_mobile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTitle_sub(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDesp(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIco(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setApp_active(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setShare_content(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EarnPointTaskInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EarnPointTaskInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EarnPointTaskInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
